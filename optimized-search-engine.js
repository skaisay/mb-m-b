/**
 * –°–≤–µ—Ä—Ö–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∏–ª–ª–∏–æ–Ω—ã –∑–∞–ø–∏—Å–µ–π —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
 */

class OptimizedSearchEngine {
    constructor() {
        // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        this.keywordIndex = new Map(); // Map<keyword, Set<itemId>>
        this.categoryIndex = new Map(); // Map<category, Set<itemId>>
        this.levelIndex = new Map(); // Map<level, Set<itemId>>
        this.itemsById = new Map(); // Map<id, item>
        
        // –ö–µ—à –¥–ª—è –ø–æ–∏—Å–∫–∞
        this.searchCache = new Map(); // Map<query, results>
        this.maxCacheSize = 1000;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        this.stopWords = new Set(['–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫—Ç–æ']);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.searchStats = {
            totalSearches: 0,
            cacheHits: 0,
            avgSearchTime: 0
        };
        
        console.log('üöÄ OptimizedSearchEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    buildIndexes(data) {
        const startTime = performance.now();
        
        console.log(`üìä –ù–∞—á–∏–Ω–∞—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é ${data.length} –∑–∞–ø–∏—Å–µ–π...`);
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
        this.clearIndexes();
        
        data.forEach(item => this.indexItem(item));
        
        const endTime = performance.now();
        console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${(endTime - startTime).toFixed(2)}ms`);
        console.log(`üìà –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: ${this.itemsById.size} –∑–∞–ø–∏—Å–µ–π, ${this.keywordIndex.size} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
    }

    /**
     * –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    indexItem(item) {
        if (!item.id) return;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        this.itemsById.set(item.id, item);
        
        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if (item.keywords) {
            item.keywords.forEach(keyword => {
                const normalizedKeyword = this.normalizeText(keyword);
                if (!this.keywordIndex.has(normalizedKeyword)) {
                    this.keywordIndex.set(normalizedKeyword, new Set());
                }
                this.keywordIndex.get(normalizedKeyword).add(item.id);
            });
        }
        
        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        if (item.question) {
            const words = this.extractWords(item.question);
            words.forEach(word => {
                if (!this.keywordIndex.has(word)) {
                    this.keywordIndex.set(word, new Set());
                }
                this.keywordIndex.get(word).add(item.id);
            });
        }
        
        if (item.answer) {
            const words = this.extractWords(item.answer);
            words.forEach(word => {
                if (!this.keywordIndex.has(word)) {
                    this.keywordIndex.set(word, new Set());
                }
                this.keywordIndex.get(word).add(item.id);
            });
        }
        
        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if (item.category) {
            if (!this.categoryIndex.has(item.category)) {
                this.categoryIndex.set(item.category, new Set());
            }
            this.categoryIndex.get(item.category).add(item.id);
        }
        
        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å
        if (item.level) {
            if (!this.levelIndex.has(item.level)) {
                this.levelIndex.set(item.level, new Set());
            }
            this.levelIndex.get(item.level).add(item.id);
        }
    }

    /**
     * –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    search(query, options = {}) {
        const startTime = performance.now();
        this.searchStats.totalSearches++;
        
        const normalizedQuery = this.normalizeText(query);
        const cacheKey = this.getCacheKey(normalizedQuery, options);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if (this.searchCache.has(cacheKey)) {
            this.searchStats.cacheHits++;
            const result = this.searchCache.get(cacheKey);
            console.log(`‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞: ${result.length} –∑–∞–ø–∏—Å–µ–π`);
            return result;
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        const results = this.performSearch(normalizedQuery, options);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        this.updateCache(cacheKey, results);
        
        const endTime = performance.now();
        const searchTime = endTime - startTime;
        this.updateSearchStats(searchTime);
        
        console.log(`üîç –ü–æ–∏—Å–∫ "${query}": –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ ${searchTime.toFixed(2)}ms`);
        
        return results;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
     */
    performSearch(normalizedQuery, options) {
        const words = this.extractWords(normalizedQuery);
        if (words.length === 0) return [];
        
        // –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
        const wordSets = words.map(word => {
            return this.keywordIndex.get(word) || new Set();
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ (AND –ª–æ–≥–∏–∫–∞)
        let resultIds = wordSets[0];
        for (let i = 1; i < wordSets.length; i++) {
            resultIds = this.intersectSets(resultIds, wordSets[i]);
        }
        
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º OR –ª–æ–≥–∏–∫—É
        if (resultIds.size === 0) {
            resultIds = this.unionSets(wordSets);
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—é
        if (options.category) {
            const categoryIds = this.categoryIndex.get(options.category) || new Set();
            resultIds = this.intersectSets(resultIds, categoryIds);
        }
        
        if (options.level) {
            const levelIds = this.levelIndex.get(options.level) || new Set();
            resultIds = this.intersectSets(resultIds, levelIds);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        const results = Array.from(resultIds)
            .map(id => this.itemsById.get(id))
            .filter(Boolean)
            .map(item => ({
                ...item,
                relevance: this.calculateRelevance(item, normalizedQuery, words)
            }))
            .sort((a, b) => b.relevance - a.relevance);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const limit = options.limit || 10;
        return results.slice(0, limit);
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
     */
    calculateRelevance(item, query, queryWords) {
        let score = 0;
        
        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
        if (item.keywords) {
            item.keywords.forEach(keyword => {
                if (this.normalizeText(keyword) === query) {
                    score += 100;
                } else if (this.normalizeText(keyword).includes(query)) {
                    score += 50;
                }
            });
        }
        
        // –°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–µ
        if (item.question) {
            const questionWords = this.extractWords(item.question);
            queryWords.forEach(word => {
                if (questionWords.includes(word)) {
                    score += 10;
                }
            });
        }
        
        // –°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        if (item.answer) {
            const answerWords = this.extractWords(item.answer);
            queryWords.forEach(word => {
                if (answerWords.includes(word)) {
                    score += 5;
                }
            });
        }
        
        // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if (item.category && queryWords.includes(item.category.toLowerCase())) {
            score += 20;
        }
        
        return score;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
     */
    normalizeText(text) {
        if (!text) return '';
        
        return text
            .toLowerCase()
            .replace(/[^\w–∞-—è—ë\s]/gi, ' ') // –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
            .trim();
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
     */
    extractWords(text) {
        const normalized = this.normalizeText(text);
        return normalized
            .split(' ')
            .filter(word => word.length > 1 && !this.stopWords.has(word))
            .slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    }

    /**
     * –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤ (AND –ª–æ–≥–∏–∫–∞)
     */
    intersectSets(set1, set2) {
        const result = new Set();
        const smaller = set1.size <= set2.size ? set1 : set2;
        const larger = set1.size > set2.size ? set1 : set2;
        
        for (const item of smaller) {
            if (larger.has(item)) {
                result.add(item);
            }
        }
        
        return result;
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤ (OR –ª–æ–≥–∏–∫–∞)
     */
    unionSets(sets) {
        const result = new Set();
        sets.forEach(set => {
            set.forEach(item => result.add(item));
        });
        return result;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –∫–µ—à–∞
     */
    getCacheKey(query, options) {
        return `${query}|${options.category || ''}|${options.level || ''}|${options.limit || 10}`;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
     */
    updateCache(key, results) {
        // –ï—Å–ª–∏ –∫–µ—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if (this.searchCache.size >= this.maxCacheSize) {
            const firstKey = this.searchCache.keys().next().value;
            this.searchCache.delete(firstKey);
        }
        
        this.searchCache.set(key, results);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
     */
    updateSearchStats(searchTime) {
        const { totalSearches, avgSearchTime } = this.searchStats;
        this.searchStats.avgSearchTime = ((avgSearchTime * (totalSearches - 1)) + searchTime) / totalSearches;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
     */
    clearIndexes() {
        this.keywordIndex.clear();
        this.categoryIndex.clear();
        this.levelIndex.clear();
        this.itemsById.clear();
        this.searchCache.clear();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            ...this.searchStats,
            cacheHitRate: (this.searchStats.cacheHits / this.searchStats.totalSearches * 100).toFixed(2) + '%',
            totalItems: this.itemsById.size,
            totalKeywords: this.keywordIndex.size,
            cacheSize: this.searchCache.size
        };
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    preloadPopularQueries(queries) {
        console.log('üî• –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
        queries.forEach(query => {
            this.search(query);
        });
        console.log(`‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
    }

    /**
     * –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    getSuggestions(partialQuery, limit = 5) {
        const normalized = this.normalizeText(partialQuery);
        const suggestions = [];
        
        for (const keyword of this.keywordIndex.keys()) {
            if (keyword.startsWith(normalized) && keyword !== normalized) {
                suggestions.push(keyword);
                if (suggestions.length >= limit) break;
            }
        }
        
        return suggestions;
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ
 */
if (typeof module !== 'undefined' && module.exports) {
    module.exports = OptimizedSearchEngine;
} else if (typeof window !== 'undefined') {
    window.OptimizedSearchEngine = OptimizedSearchEngine;
}