/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤–µ–±-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥, –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 */

class WebAssistant {
    constructor() {
        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        this.messagesContainer = document.getElementById('messagesContainer');
        this.messageInput = document.getElementById('messageInput');
        this.inputForm = document.getElementById('inputForm');
        this.loadingIndicator = document.getElementById('loadingIndicator');
        this.chatTitle = document.getElementById('chatTitle');
        // –£–±–∏—Ä–∞–µ–º sendButton —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Enter
        this.inputWrapper = document.querySelector('.input-wrapper');
        this.contextMenu = document.getElementById('customContextMenu');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.isProcessing = false;
        this.messageHistory = [];
        this.userProfile = {
            name: localStorage.getItem('userName') || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            avatar: localStorage.getItem('userAvatar') || 'anime1'
        };
        this.firstMessage = true;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        this.selectedText = '';
        this.selectedElement = null;
        this.longPressTimer = null;
        this.longPressStarted = false;
        this.startX = 0;
        this.startY = 0;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ä–≤–µ–∂—Å–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        this.norwegianEngine = null;
        this.optimizedEngine = null;
        
        // –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        this.speechRecognition = null;
        this.speechSynthesis = null;
        this.isListening = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    init() {
        this.bindEvents();
        this.initializeFeatherIcons();
        this.initializeNorwegianEngine();
        this.initializePWA();
        this.initializeSpeechFeatures();
        this.initializeProfile();
        this.initializeVoiceWindow();
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.messageInput.focus();
        
        console.log('–í–µ–±-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ—Ä–≤–µ–∂—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ Feather
     */
    initializeFeatherIcons() {
        if (typeof feather !== 'undefined') {
            feather.replace();
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ä–≤–µ–∂—Å–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    initializeNorwegianEngine() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        if (typeof OptimizedSearchEngine !== 'undefined') {
            this.optimizedEngine = new OptimizedSearchEngine();
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –µ–¥–∏–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            const allData = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            if (typeof DATABASE !== 'undefined') {
                allData.push(...DATABASE);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–≤–µ–∂—Å–∫—É—é –±–∞–∑—É —Å–ª–æ–≤
            if (typeof NORWEGIAN_DATABASE !== 'undefined' && NORWEGIAN_DATABASE.vocabulary) {
                NORWEGIAN_DATABASE.vocabulary.forEach(item => {
                    allData.push({
                        id: `nor_${item.id}`,
                        keywords: [item.norwegian, item.russian, ...(item.synonyms || [])],
                        question: `${item.norwegian} ${item.russian}`,
                        answer: `üá≥üá¥ **${item.norwegian}** [${item.pronunciation}]\nüá∑üá∫ **${item.russian}**\n\nüìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${item.category}\nüìä –£—Ä–æ–≤–µ–Ω—å: ${item.level}`,
                        category: item.category,
                        level: item.level,
                        type: 'norwegian'
                    });
                });
            }
            
            // –°—Ç—Ä–æ–∏–º —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            this.optimizedEngine.buildIndexes(allData);
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –∫–µ—à
            const popularQueries = [
                '–ø—Ä–∏–≤–µ—Ç', '—Å–ø–∞—Å–∏–±–æ', '–∫–∞–∫ –¥–µ–ª–∞', '—Å–µ–º—å—è', '–µ–¥–∞', '–≤—Ä–µ–º—è', '—á–∏—Å–ª–∞',
                '—Ä–∞–±–æ—Ç–∞', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞', '–ø–µ—Ä–µ–≤–µ–¥–∏', 'hei', 'takk',
                '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '–ø–æ–ª–∏—Ç–∏–∫–∞', '–ø—Ä–∏—Ä–æ–¥–∞', '–º–Ω–µ–Ω–∏—è'
            ];
            this.optimizedEngine.preloadPopularQueries(popularQueries);
            
            console.log('üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', allData.length, '–∑–∞–ø–∏—Å–µ–π');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                const stats = this.optimizedEngine.getStats();
                console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:', stats);
            }, 2000);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        if (typeof NorwegianSearchEngine !== 'undefined') {
            this.norwegianEngine = new NorwegianSearchEngine();
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
     */
    initializeSpeechFeatures() {
        this.voiceButton = document.getElementById('voiceButton');
        console.log('–ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞:', this.voiceButton);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Speech Recognition API
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            this.speechRecognition = new SpeechRecognition();
            
            this.speechRecognition.continuous = false;
            this.speechRecognition.interimResults = false;
            this.speechRecognition.lang = 'ru-RU';
            
            this.speechRecognition.onstart = () => {
                this.isListening = true;
                this.voiceButton?.classList.add('recording');
                console.log('–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏');
            };
            
            this.speechRecognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                this.updateVoiceTranscript(transcript);
                this.updateVoiceStatus('–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω! –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç–µ –µ—â–µ');
                this.showVoiceButton('send');
                console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', transcript);
            };
            
            this.speechRecognition.onend = () => {
                this.isListening = false;
                this.voiceButton?.classList.remove('recording');
                if (this.currentTranscript) {
                    this.updateVoiceStatus('–ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
                    this.showVoiceButton('send');
                } else {
                    this.updateVoiceStatus('–ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
                    this.showVoiceButton('start');
                }
                console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏');
            };
            
            this.speechRecognition.onerror = (event) => {
                this.isListening = false;
                this.voiceButton?.classList.remove('recording');
                console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', event.error);
            };
        } else {
            console.warn('Speech Recognition API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            console.log('User Agent:', navigator.userAgent);
            console.log('Protocol:', window.location.protocol);
            console.log('Is HTTPS:', window.location.protocol === 'https:');
            if (this.voiceButton) {
                this.voiceButton.style.display = 'none';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Speech Synthesis API
        if ('speechSynthesis' in window) {
            this.speechSynthesis = window.speechSynthesis;
            console.log('Speech Synthesis API –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
            console.warn('Speech Synthesis API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        if (this.voiceButton) {
            this.voiceButton.addEventListener('click', () => this.openVoiceModal());
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.initializeVoiceModal();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
     */
    toggleVoiceRecognition() {
        if (!this.speechRecognition) {
            alert('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            return;
        }
        
        if (this.isListening) {
            this.speechRecognition.stop();
        } else {
            try {
                this.speechRecognition.start();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', error);
            }
        }
    }

    /**
     * –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
     */
    speakText(text) {
        return new Promise((resolve, reject) => {
            if (!this.speechSynthesis) {
                console.warn('Speech Synthesis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve();
                return;
            }

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ—á—å
            this.speechSynthesis.cancel();

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'ru-RU';
            utterance.rate = 0.9;
            utterance.pitch = 1;
            utterance.volume = 0.8;

            // –ù–∞—Ö–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            const voices = this.speechSynthesis.getVoices();
            const russianVoice = voices.find(voice => 
                voice.lang.includes('ru') || voice.lang.includes('RU')
            );
            
            if (russianVoice) {
                utterance.voice = russianVoice;
            }

            utterance.onstart = () => {
                console.log('–ù–∞—á–∞–ª–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è');
            };

            utterance.onend = () => {
                console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è');
                resolve();
            };

            utterance.onerror = (event) => {
                console.error('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:', event.error);
                reject(event.error);
            };

            this.speechSynthesis.speak(utterance);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    initializeVoiceModal() {
        this.voiceModalOverlay = document.getElementById('voiceModalOverlay');
        this.voiceModal = document.getElementById('voiceModal');
        this.closeVoiceModal = document.getElementById('closeVoiceModal');
        this.voiceStatus = document.getElementById('voiceStatus');
        this.voiceTranscript = document.getElementById('voiceTranscript');
        this.startVoiceBtn = document.getElementById('startVoiceBtn');
        this.stopVoiceBtn = document.getElementById('stopVoiceBtn');
        this.sendVoiceBtn = document.getElementById('sendVoiceBtn');
        
        this.currentTranscript = '';
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.closeVoiceModal?.addEventListener('click', () => this.closeVoiceModalWindow());
        this.voiceModalOverlay?.addEventListener('click', (e) => {
            if (e.target === this.voiceModalOverlay) {
                this.closeVoiceModalWindow();
            }
        });
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        this.startVoiceBtn?.addEventListener('click', () => this.startVoiceRecording());
        this.stopVoiceBtn?.addEventListener('click', () => this.stopVoiceRecording());
        this.sendVoiceBtn?.addEventListener('click', () => this.sendVoiceMessage());
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    openVoiceModal() {
        if (!this.voiceModalOverlay) return;
        
        this.voiceModalOverlay.classList.add('active');
        this.updateVoiceStatus('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ');
        this.clearVoiceTranscript();
        this.resetVoiceButtons();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ Feather
        setTimeout(() => {
            if (typeof feather !== 'undefined') {
                feather.replace();
            }
        }, 100);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeVoiceModalWindow() {
        if (!this.voiceModalOverlay) return;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
        if (this.isListening) {
            this.speechRecognition?.stop();
        }
        
        this.voiceModalOverlay.classList.remove('active');
        this.resetVoiceButtons();
    }

    /**
     * –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å
     */
    startVoiceRecording() {
        if (!this.speechRecognition) {
            this.updateVoiceStatus('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            return;
        }
        
        try {
            this.speechRecognition.start();
            this.updateVoiceStatus('–°–ª—É—à–∞—é... –≥–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å');
            this.showVoiceButton('stop');
        } catch (error) {
            this.updateVoiceStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: ' + error.message);
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å
     */
    stopVoiceRecording() {
        if (this.speechRecognition && this.isListening) {
            this.speechRecognition.stop();
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    sendVoiceMessage() {
        if (this.currentTranscript.trim()) {
            this.messageInput.value = this.currentTranscript;
            this.closeVoiceModalWindow();
            this.handleSubmit();
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–∫–Ω–∞
     */
    updateVoiceStatus(message) {
        if (this.voiceStatus) {
            this.voiceStatus.textContent = message;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
     */
    clearVoiceTranscript() {
        this.currentTranscript = '';
        if (this.voiceTranscript) {
            this.voiceTranscript.textContent = '–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...';
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
     */
    updateVoiceTranscript(text) {
        this.currentTranscript = text;
        if (this.voiceTranscript) {
            this.voiceTranscript.textContent = text || '–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
     */
    showVoiceButton(type) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        this.startVoiceBtn.style.display = 'none';
        this.stopVoiceBtn.style.display = 'none';
        this.sendVoiceBtn.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é
        switch(type) {
            case 'start':
                this.startVoiceBtn.style.display = 'flex';
                break;
            case 'stop':
                this.stopVoiceBtn.style.display = 'flex';
                break;
            case 'send':
                this.sendVoiceBtn.style.display = 'flex';
                break;
        }
    }

    /**
     * –°–±—Ä–æ—Å –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–∫–Ω–∞
     */
    resetVoiceButtons() {
        this.showVoiceButton('start');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA —Ñ—É–Ω–∫—Ü–∏–π
     */
    initializePWA() {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then((registration) => {
                        console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration.scope);
                        
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                        registration.addEventListener('updatefound', () => {
                            console.log('–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker');
                        });
                    })
                    .catch((error) => {
                        console.log('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
                    });
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            console.log('PWA –≥–æ—Ç–æ–≤–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ');
            this.showInstallPrompt(deferredPrompt);
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        window.addEventListener('appinstalled', () => {
            console.log('PWA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            deferredPrompt = null;
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
     */
    showInstallPrompt(deferredPrompt) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ PWA');
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.inputForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleSubmit();
        });



        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        this.messageInput.addEventListener('input', () => {
            this.adjustInputHeight();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
        this.messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.handleSubmit();
            }
        });

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.messageInput.addEventListener('paste', () => {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
        });

        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
        this.messageInput.addEventListener('input', () => {
            this.handleInputEffects();
        });

        this.messageInput.addEventListener('focus', () => {
            this.inputWrapper.classList.add('typing');
        });

        this.messageInput.addEventListener('blur', () => {
            if (this.messageInput.value.trim() === '') {
                this.inputWrapper.classList.remove('typing');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        this.bindContextMenuEvents();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —à–∞–ø–∫–∏ —É–±—Ä–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º CSS-only –ø–æ–¥—Ö–æ–¥

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –Ω–æ–≤–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        const newChatBtn = document.getElementById('newChatBtn');
        
        if (newChatBtn) {
            newChatBtn.addEventListener('click', () => {
                this.startNewChat();
            });
        }
    }



    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —à–∞–ø–∫–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     * –û–¢–ö–õ–Æ–ß–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º CSS-only –ø–æ–¥—Ö–æ–¥
     */
    // bindKeyboardHandlers() {
    //     // –ú–µ—Ç–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ CSS —Ä–µ—à–µ–Ω–∏–µ
    // }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
     */
    bindContextMenuEvents() {
        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.messagesContainer.addEventListener('mousedown', (e) => {
            const messageContent = e.target.closest('.message-content');
            if (messageContent) {
                this.startLongPress(e, messageContent);
            }
        });

        this.messagesContainer.addEventListener('touchstart', (e) => {
            const messageContent = e.target.closest('.message-content');
            if (messageContent) {
                this.startLongPress(e, messageContent);
            }
        });

        // –û—Ç–º–µ–Ω–∞ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        document.addEventListener('mouseup', () => this.cancelLongPress());
        document.addEventListener('touchend', () => this.cancelLongPress());
        
        // –û—Ç–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
        document.addEventListener('mousemove', (e) => {
            if (this.longPressTimer && this.startX !== 0) {
                const deltaX = Math.abs(e.clientX - this.startX);
                const deltaY = Math.abs(e.clientY - this.startY);
                if (deltaX > 10 || deltaY > 10) {
                    this.cancelLongPress();
                }
            }
        });
        
        document.addEventListener('touchmove', (e) => {
            if (this.longPressTimer && this.startX !== 0) {
                const touch = e.touches[0] || e.changedTouches[0];
                const deltaX = Math.abs(touch.clientX - this.startX);
                const deltaY = Math.abs(touch.clientY - this.startY);
                if (deltaX > 10 || deltaY > 10) {
                    this.cancelLongPress();
                }
            }
        });

        // –°–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (!this.contextMenu.contains(e.target)) {
                this.hideContextMenu();
            }
        });

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        document.addEventListener('contextmenu', (e) => {
            if (e.target.closest('.message-content')) {
                e.preventDefault();
            }
        });
    }

    /**
     * –ù–∞—á–∞–ª–æ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
     */
    startLongPress(e, element) {
        this.cancelLongPress();
        this.selectedElement = element;
        this.selectedText = element.textContent;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        this.startX = e.clientX || (e.touches && e.touches[0].clientX);
        this.startY = e.clientY || (e.touches && e.touches[0].clientY);
        
        this.longPressTimer = setTimeout(() => {
            this.showContextMenu(e);
            this.longPressStarted = true;
        }, 500); // 500ms –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
     */
    cancelLongPress() {
        if (this.longPressTimer) {
            clearTimeout(this.longPressTimer);
            this.longPressTimer = null;
        }
        this.longPressStarted = false;
        this.startX = 0;
        this.startY = 0;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
     */
    showContextMenu(e) {
        const x = e.clientX || (e.touches && e.touches[0].clientX);
        const y = e.clientY || (e.touches && e.touches[0].clientY);
        
        this.contextMenu.style.left = x + 'px';
        this.contextMenu.style.top = y + 'px';
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –º–µ–Ω—é –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        setTimeout(() => {
            const rect = this.contextMenu.getBoundingClientRect();
            if (rect.right > window.innerWidth) {
                this.contextMenu.style.left = (x - rect.width) + 'px';
            }
            if (rect.bottom > window.innerHeight) {
                this.contextMenu.style.top = (y - rect.height) + 'px';
            }
        }, 0);
        
        this.contextMenu.classList.add('show');
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
     */
    hideContextMenu() {
        this.contextMenu.classList.remove('show');
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    copySelectedText() {
        if (this.selectedText) {
            navigator.clipboard.writeText(this.selectedText).then(() => {
                console.log('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:', this.selectedText);
                this.hideContextMenu();
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = this.selectedText;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                this.hideContextMenu();
            });
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ–ª—è –≤–≤–æ–¥–∞
     */
    adjustInputHeight() {
        this.messageInput.style.height = 'auto';
        this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 150) + 'px';
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –≤–≤–æ–¥–µ
     */
    handleInputEffects() {
        if (this.messageInput.value.trim() !== '') {
            this.inputWrapper.classList.add('typing');
        } else {
            this.inputWrapper.classList.remove('typing');
        }
    }

    // –ú–µ—Ç–æ–¥ updateSendButtonState —É–¥–∞–ª–µ–Ω - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async handleSubmit() {
        const message = this.messageInput.value.trim();
        
        if (!message || this.isProcessing) {
            return;
        }

        this.isProcessing = true;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addUserMessage(message);
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.messageInput.value = '';
        this.adjustInputHeight();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.showLoadingIndicator();

        try {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞
            await this.delay(800 + Math.random() * 1200);
            
            // –ò—â–µ–º –æ—Ç–≤–µ—Ç
            const response = this.findBestAnswer(message);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.hideLoadingIndicator();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            this.addAssistantMessage(response);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            this.hideLoadingIndicator();
            this.addAssistantMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } finally {
            this.isProcessing = false;
            this.messageInput.focus();
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    findBestAnswer(userMessage) {
        const normalizedMessage = this.normalizeText(userMessage);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        const isTranslationRequest = this.isTranslationRequest(normalizedMessage);
        const isGrammarRequest = this.isGrammarRequest(normalizedMessage);
        const isRandomWordRequest = this.isRandomWordRequest(normalizedMessage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        if (isTranslationRequest) {
            return this.handleTranslationRequest(userMessage);
        }
        
        if (isRandomWordRequest) {
            return this.getRandomWordResponse();
        }
        
        if (isGrammarRequest) {
            return this.getGrammarResponse(normalizedMessage);
        }
        
        // –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
        if (this.optimizedEngine) {
            const results = this.optimizedEngine.search(userMessage, { limit: 3 });
            if (results.length > 0) {
                return results[0].answer;
            }
        }
        
        // –§–æ–ª–±—ç–∫: –ø–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (typeof DATABASE !== 'undefined') {
            for (const item of DATABASE) {
                if (item.keywords) {
                    const match = item.keywords.some(keyword => 
                        normalizedMessage.includes(keyword.toLowerCase())
                    );
                    if (match) {
                        return item.answer;
                    }
                }
            }
        }
        
        // –§–æ–ª–±—ç–∫: –ø–æ–∏—Å–∫ –≤ –Ω–æ—Ä–≤–µ–∂—Å–∫–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (this.norwegianEngine) {
            const results = this.norwegianEngine.search(userMessage);
            if (results.length > 0) {
                return this.formatTranslationResponse(results[0], false);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
        return this.getHelpResponse(userMessage);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    isTranslationRequest(message) {
        const translationKeywords = ['–ø–µ—Ä–µ–≤–æ–¥', '–ø–µ—Ä–µ–≤–µ–¥–∏', '–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å', '—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç', '–∫–∞–∫ –±—É–¥–µ—Ç', 'translate'];
        return translationKeywords.some(keyword => message.includes(keyword));
    }

    isGrammarRequest(message) {
        const grammarKeywords = ['–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞', '–ø—Ä–∞–≤–∏–ª–æ', '–∫–∞–∫ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è', '–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ', '–∞—Ä—Ç–∏–∫–ª—å'];
        return grammarKeywords.some(keyword => message.includes(keyword));
    }

    isRandomWordRequest(message) {
        const randomKeywords = ['—Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ', '–¥–∞–π —Å–ª–æ–≤–æ', '–Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', '–∏–∑—É—á–∏—Ç—å —Å–ª–æ–≤–æ'];
        return randomKeywords.some(keyword => message.includes(keyword));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
     */
    handleTranslationRequest(message) {
        // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        let textToTranslate = message.toLowerCase()
            .replace(/–ø–µ—Ä–µ–≤–µ–¥–∏\s*/g, '')
            .replace(/–ø–µ—Ä–µ–≤–æ–¥\s*/g, '')
            .replace(/–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å\s*/g, '')
            .replace(/–ø–æ-–Ω–æ—Ä–≤–µ–∂—Å–∫–∏\s*/g, '')
            .replace(/translate\s*/g, '')
            .replace(/oversett\s*/g, '')
            .replace(/[\"\']/g, '')
            .trim();

        // –ò—â–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (typeof findTranslation !== 'undefined') {
            const translation = findTranslation(textToTranslate);
            
            if (translation) {
                return `**–ü–µ—Ä–µ–≤–æ–¥:**

üá∑üá∫ "${textToTranslate}" 
üá≥üá¥ ${translation}

*–°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–ª—É—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!*`;
            }
        }

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        const suggestions = this.getTranslationSuggestions(textToTranslate);
        if (suggestions.length > 0) {
            return `**–¢–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω**

–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏:
${suggestions.map(s => `‚Ä¢ ${s.russian} = ${s.norwegian}`).join('\n')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!`;
        }

        return `**–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "${textToTranslate}".

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç—å "–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å [—Å–ª–æ–≤–æ]"
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Å–µ–º—å—è, –µ–¥–∞, –≤—Ä–µ–º—è

**–ü—Ä–∏–º–µ—Ä:** "–ü–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç" –∏–ª–∏ "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ"`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
     */
    getTranslationSuggestions(text) {
        const suggestions = [];
        
        if (typeof TRANSLATION_DATABASE !== 'undefined') {
            // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for (const [key, value] of Object.entries(TRANSLATION_DATABASE)) {
                if (key.includes(text) || text.includes(key)) {
                    suggestions.push({
                        russian: key,
                        norwegian: value
                    });
                    
                    if (suggestions.length >= 3) break;
                }
            }
        }
        
        return suggestions;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
     */
    formatTranslationResponse(item, isTranslation) {
        let response = `üá≥üá¥ **${item.norwegian}** [${item.pronunciation}]\n`;
        response += `üá∑üá∫ **${item.russian}**\n\n`;
        
        if (item.examples && item.examples.length > 0) {
            response += `üìù **–ü—Ä–∏–º–µ—Ä:**\n`;
            response += `‚Ä¢ ${item.examples[0].no}\n`;
            response += `‚Ä¢ ${item.examples[0].ru}\n\n`;
        }
        
        response += `üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${NORWEGIAN_DATABASE.categories[item.category] || item.category}\n`;
        response += `üìä –£—Ä–æ–≤–µ–Ω—å: ${NORWEGIAN_DATABASE.levels[item.level] || item.level}`;
        
        return response;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞
     */
    getRandomWordResponse() {
        const randomWord = this.norwegianEngine.getRandomWord();
        return this.formatTranslationResponse(randomWord, false);
    }

    /**
     * –û—Ç–≤–µ—Ç —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
     */
    getGrammarResponse(message) {
        const grammarRules = this.norwegianEngine.getGrammarRules();
        if (grammarRules.length > 0) {
            const rule = grammarRules[0];
            let response = `üìñ **–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: ${rule.topic}**\n\n`;
            response += `üá≥üá¥ **–ü—Ä–∞–≤–∏–ª–æ:** ${rule.norwegian_rule}\n\n`;
            response += `üá∑üá∫ **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** ${rule.russian_explanation}\n\n`;
            response += `üìù **–ü—Ä–∏–º–µ—Ä—ã:**\n`;
            rule.examples.forEach(example => {
                response += `‚Ä¢ ${example.no} ‚Äî ${example.ru}\n`;
            });
            return response;
        }
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    }

    /**
     * –ü–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    getHelpResponse(userMessage) {
        return `–Ø –ø–æ–º–æ–≥–∞—é –∏–∑—É—á–∞—Ç—å –Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π —è–∑—ã–∫! üá≥üá¥

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥: "–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç?"
‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ: "–¥–∞–π –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"
‚Ä¢ –£–∑–Ω–∞—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É: "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∞—Ä—Ç–∏–∫–ª–∏"
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –Ω–æ—Ä–≤–µ–∂—Å–∫–æ–º

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!`;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    normalizeText(text) {
        return text.toLowerCase()
            .replace(/[^\w\s–∞-—è—ë]/gi, '')
            .replace(/\s+/g, ' ')
            .trim();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultResponse(userMessage) {
        const defaultResponses = [
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.',
            '–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ IT-—Å—Ñ–µ—Ä–µ. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–∏–º —Ç–µ–º–∞–º?',
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ JavaScript, HTML, CSS, React –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.',
            '–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –Ø –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.'
        ];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        const greetings = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', 'hello', 'hi'];
        const normalizedMessage = this.normalizeText(userMessage);
        
        if (greetings.some(greeting => normalizedMessage.includes(greeting))) {
            return '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≤–µ–±-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ IT-—Å—Ñ–µ—Ä–µ. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å?';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
        const thanks = ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks', 'thank you'];
        if (thanks.some(thank => normalizedMessage.includes(thank))) {
            return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!';
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    addUserMessage(message) {
        const messageElement = this.createMessageElement(message, 'user');
        this.messagesContainer.appendChild(messageElement);
        this.scrollToBottom();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (this.firstMessage) {
            this.updateChatTitle(message);
            this.firstMessage = false;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.messageHistory.push({ type: 'user', content: message, timestamp: Date.now() });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
     */
    addAssistantMessage(message) {
        const messageElement = this.createMessageElement(message, 'assistant');
        this.messagesContainer.appendChild(messageElement);
        this.scrollToBottom();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.messageHistory.push({ type: 'assistant', content: message, timestamp: Date.now() });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        setTimeout(() => {
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç markdown –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
            const cleanText = this.cleanTextForSpeech(message);
            this.speakText(cleanText);
        }, 500);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
     */
    cleanTextForSpeech(text) {
        return text
            // –£–±–∏—Ä–∞–µ–º markdown
            .replace(/\*\*(.*?)\*\*/g, '$1')
            .replace(/\*(.*?)\*/g, '$1')
            .replace(/`(.*?)`/g, '$1')
            .replace(/#{1,6}\s/g, '')
            // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
            .replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '')
            // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            .replace(/[‚Ä¢‚Äì‚Äî]/g, '')
            // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            .replace(/\s+/g, ' ')
            .trim();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    createMessageElement(content, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}-message`;

        if (type === 'assistant') {
            // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            const noteBlock = document.createElement('div');
            noteBlock.className = 'assistant-note-block message-content';
            
            const noteContent = document.createElement('p');
            noteContent.className = 'assistant-note-content';
            
            const noteLabel = document.createElement('span');
            noteLabel.className = 'assistant-note-label';
            noteLabel.textContent = '–û—Ç–≤–µ—Ç:';
            
            noteContent.appendChild(noteLabel);
            noteContent.appendChild(document.createTextNode(' ' + content));
            noteBlock.appendChild(noteContent);
            
            messageDiv.appendChild(noteBlock);
        } else {
            // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const avatarDiv = document.createElement('div');
            avatarDiv.className = 'message-avatar';
            
            const avatarIcon = document.createElement('i');
            avatarIcon.setAttribute('data-feather', 'user');
            avatarDiv.appendChild(avatarIcon);

            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            
            const contentP = document.createElement('p');
            contentP.textContent = content;
            contentDiv.appendChild(contentP);

            messageDiv.appendChild(avatarDiv);
            messageDiv.appendChild(contentDiv);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        setTimeout(() => {
            if (typeof feather !== 'undefined') {
                feather.replace();
            }
        }, 0);

        return messageDiv;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingIndicator() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'message loading-message';
        loadingDiv.id = 'currentLoading';
        
        const avatarDiv = document.createElement('div');
        avatarDiv.className = 'loading-message-avatar';
        
        const loader = document.createElement('span');
        loader.className = 'loader';
        avatarDiv.appendChild(loader);
        
        loadingDiv.appendChild(avatarDiv);
        
        this.messagesContainer.appendChild(loadingDiv);
        this.scrollToBottom();
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingIndicator() {
        const currentLoading = document.getElementById('currentLoading');
        if (currentLoading) {
            currentLoading.remove();
        }
    }

    /**
     * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∏–∑—É
     */
    scrollToBottom() {
        setTimeout(() => {
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }, 100);
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
     */
    updateChatTitle(message) {
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        const words = message.trim().split(' ').slice(0, 3);
        const title = words.join(' ');
        
        if (this.chatTitle) {
            this.chatTitle.textContent = title.length > 30 ? title.substring(0, 30) + '...' : title;
        }
    }

    /**
     * –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
     */
    startNewChat() {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        this.messagesContainer.innerHTML = '';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.messageHistory = [];
        this.firstMessage = true;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (this.chatTitle) {
            this.chatTitle.textContent = '–ù–æ–≤—ã–π —á–∞—Ç';
        }
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.messageInput.focus();
        
        console.log('–ù–æ–≤—ã–π —á–∞—Ç –Ω–∞—á–∞—Ç');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    getUsageStats() {
        return {
            totalMessages: this.messageHistory.length,
            userMessages: this.messageHistory.filter(m => m.type === 'user').length,
            assistantMessages: this.messageHistory.filter(m => m.type === 'assistant').length,
            sessionStart: this.messageHistory.length > 0 ? this.messageHistory[0].timestamp : Date.now()
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    initializeProfile() {
        this.updateProfileDisplay();
        this.bindProfileEvents();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
     */
    updateProfileDisplay() {
        const userNameDisplay = document.getElementById('userNameDisplay');
        const userAvatarPreview = document.getElementById('userAvatarPreview');
        
        if (userNameDisplay) {
            userNameDisplay.textContent = this.userProfile.name;
        }
        
        if (userAvatarPreview) {
            this.setAvatarImage(userAvatarPreview, this.userProfile.avatar);
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ñ–∏–ª—è
     */
    bindProfileEvents() {
        // –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
        const menuButton = document.getElementById('menuButton');
        const sideMenu = document.getElementById('sideMenu');
        const closeMenuBtn = document.getElementById('closeMenuBtn');

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è
        const editProfileBtn = document.getElementById('editProfileBtn');
        const profileModal = document.getElementById('profileModal');
        const modalOverlay = document.getElementById('modalOverlay');
        const closeModalBtn = document.getElementById('closeModalBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        const saveBtn = document.getElementById('saveBtn');

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
        if (menuButton) {
            menuButton.addEventListener('click', () => {
                console.log('–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
                if (sideMenu) {
                    sideMenu.classList.add('open');
                    console.log('–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ');
                } else {
                    console.log('–≠–ª–µ–º–µ–Ω—Ç sideMenu –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            });
        } else {
            console.log('–ö–Ω–æ–ø–∫–∞ menuButton –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
        closeMenuBtn?.addEventListener('click', () => {
            sideMenu?.classList.remove('open');
        });

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
        editProfileBtn?.addEventListener('click', () => {
            this.openProfileModal();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        [closeModalBtn, cancelBtn].forEach(element => {
            element?.addEventListener('click', () => {
                this.closeProfileModal();
            });
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        modalOverlay?.addEventListener('click', (e) => {
            if (e.target === modalOverlay) {
                this.closeProfileModal();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (sideMenu?.classList.contains('open') && 
                !sideMenu.contains(e.target) && 
                !menuButton?.contains(e.target)) {
                sideMenu.classList.remove('open');
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        saveBtn?.addEventListener('click', () => {
            this.saveProfile();
        });

        // –í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞
        document.querySelectorAll('.avatar-option').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.avatar-option').forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
            });
        });
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
     */
    openProfileModal() {
        const profileModal = document.getElementById('profileModal');
        const modalOverlay = document.getElementById('modalOverlay');
        const userNameInput = document.getElementById('userName');
        const sideMenu = document.getElementById('sideMenu');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
        sideMenu?.classList.remove('open');

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (userNameInput) {
            userNameInput.value = this.userProfile.name;
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä
        document.querySelectorAll('.avatar-option').forEach(option => {
            option.classList.remove('selected');
            if (option.dataset.avatar === this.userProfile.avatar) {
                option.classList.add('selected');
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modalOverlay?.classList.add('open');
        profileModal?.classList.add('open');
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏
        setTimeout(() => userNameInput?.focus(), 100);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
     */
    closeProfileModal() {
        const profileModal = document.getElementById('profileModal');
        const modalOverlay = document.getElementById('modalOverlay');

        profileModal?.classList.remove('open');
        modalOverlay?.classList.remove('open');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
     */
    saveProfile() {
        const userNameInput = document.getElementById('userName');
        const selectedAvatar = document.querySelector('.avatar-option.selected');

        if (userNameInput && selectedAvatar) {
            const newName = userNameInput.value.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            const newAvatar = selectedAvatar.dataset.avatar;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            this.userProfile.name = newName;
            this.userProfile.avatar = newAvatar;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('userName', newName);
            localStorage.setItem('userAvatar', newAvatar);

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateProfileDisplay();

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.closeProfileModal();

            console.log('–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', this.userProfile);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
     */
    setAvatarImage(element, avatarType) {
        const avatarImages = {
            character1: "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><defs><linearGradient id='g1' x1='0%' y1='0%' x2='100%' y2='100%'><stop offset='0%' stop-color='%23667eea'/><stop offset='100%' stop-color='%23764ba2'/></linearGradient></defs><circle cx='50' cy='50' r='45' fill='url(%23g1)'/><circle cx='50' cy='35' r='12' fill='%23ffcc5c'/><circle cx='42' cy='32' r='2' fill='%23333'/><circle cx='58' cy='32' r='2' fill='%23333'/><path d='M40 42 Q50 48 60 42' stroke='%23333' stroke-width='2' fill='none'/><circle cx='50' cy='50' r='2' fill='%23ffcc5c'/><rect x='35' y='65' width='30' height='20' rx='5' fill='%23ff6b6b'/></svg>",
            character2: "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><defs><linearGradient id='g2' x1='0%' y1='0%' x2='100%' y2='100%'><stop offset='0%' stop-color='%23ff9a9e'/><stop offset='100%' stop-color='%23fecfef'/></linearGradient></defs><circle cx='50' cy='50' r='45' fill='url(%23g2)'/><ellipse cx='50' cy='35' rx='15' ry='12' fill='%23ffcc5c'/><circle cx='43' cy='32' r='2' fill='%23333'/><circle cx='57' cy='32' r='2' fill='%23333'/><path d='M43 40 Q50 44 57 40' stroke='%23333' stroke-width='2' fill='none'/><path d='M25 25 Q35 15 45 25' stroke='%23a0522d' stroke-width='3' fill='none'/><path d='M55 25 Q65 15 75 25' stroke='%23a0522d' stroke-width='3' fill='none'/><rect x='35' y='65' width='30' height='18' rx='5' fill='%234ecdc4'/></svg>",
            cat: "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><defs><linearGradient id='g3' x1='0%' y1='0%' x2='100%' y2='100%'><stop offset='0%' stop-color='%23a8e6cf'/><stop offset='100%' stop-color='%2388d8a3'/></linearGradient></defs><circle cx='50' cy='50' r='45' fill='url(%23g3)'/><ellipse cx='50' cy='45' rx='18' ry='15' fill='%23ff8a80'/><polygon points='35,30 40,15 45,30' fill='%23ff8a80'/><polygon points='55,30 60,15 65,30' fill='%23ff8a80'/><circle cx='43' cy='40' r='2' fill='%23333'/><circle cx='57' cy='40' r='2' fill='%23333'/><ellipse cx='50' cy='48' rx='2' ry='1' fill='%23333'/><path d='M48 50 L50 52 L52 50' stroke='%23333' stroke-width='2' fill='none'/><path d='M40 52 Q50 55 60 52' stroke='%23333' stroke-width='1' fill='none'/></svg>",
            robot: "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><defs><linearGradient id='g4' x1='0%' y1='0%' x2='100%' y2='100%'><stop offset='0%' stop-color='%2351e5ff'/><stop offset='100%' stop-color='%237c4dff'/></linearGradient></defs><circle cx='50' cy='50' r='45' fill='url(%23g4)'/><rect x='35' y='30' width='30' height='25' rx='3' fill='%23e8eaf6'/><circle cx='42' cy='40' r='3' fill='%234fc3f7'/><circle cx='58' cy='40' r='3' fill='%234fc3f7'/><rect x='47' y='48' width='6' height='4' rx='1' fill='%23333'/><circle cx='50' cy='25' r='3' fill='%23ff5722'/><rect x='20' y='45' width='8' height='3' rx='1' fill='%23ff9800'/><rect x='72' y='45' width='8' height='3' rx='1' fill='%23ff9800'/><rect x='40' y='65' width='20' height='8' rx='2' fill='%23424242'/></svg>",
            galaxy: "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><defs><radialGradient id='g5' cx='50%' cy='50%' r='50%'><stop offset='0%' stop-color='%23667eea'/><stop offset='50%' stop-color='%234a00e0'/><stop offset='100%' stop-color='%23000'/></radialGradient></defs><circle cx='50' cy='50' r='45' fill='url(%23g5)'/><circle cx='30' cy='25' r='1' fill='%23fff'/><circle cx='70' cy='30' r='1.5' fill='%23fff'/><circle cx='25' cy='50' r='1' fill='%23fff'/><circle cx='75' cy='65' r='1' fill='%23fff'/><circle cx='60' cy='75' r='1.5' fill='%23fff'/><circle cx='40' cy='70' r='1' fill='%23fff'/><ellipse cx='50' cy='50' rx='20' ry='8' fill='none' stroke='%23ff6b9d' stroke-width='2' opacity='0.8'/><circle cx='50' cy='50' r='6' fill='%23ffd700'/></svg>",
            gem: "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><defs><linearGradient id='g6' x1='0%' y1='0%' x2='100%' y2='100%'><stop offset='0%' stop-color='%23ff9a9e'/><stop offset='30%' stop-color='%23fecfef'/><stop offset='60%' stop-color='%23fecfef'/><stop offset='100%' stop-color='%23ff9a9e'/></linearGradient></defs><circle cx='50' cy='50' r='45' fill='%23000'/><polygon points='50,20 30,40 35,65 50,75 65,65 70,40' fill='url(%23g6)'/><polygon points='50,20 40,35 50,45 60,35' fill='%23fff' opacity='0.7'/><polygon points='30,40 40,50 50,45 35,40' fill='%23fff' opacity='0.3'/><polygon points='70,40 60,50 50,45 65,40' fill='%23fff' opacity='0.3'/></svg>"
        };

        const img = element.querySelector('img');
        if (img && avatarImages[avatarType]) {
            img.src = avatarImages[avatarType];
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –∏ —Å–≤–∞–π–ø-–∂–µ—Å—Ç–æ–≤
     */
    initializeVoiceWindow() {
        this.voiceWindow = document.getElementById('voiceWindow');
        this.voiceMicButton = document.getElementById('voiceMicButton');
        this.voiceCloseButton = document.getElementById('voiceCloseButton');
        this.voiceStatus = document.getElementById('voiceStatus');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø-–∂–µ—Å—Ç–æ–≤
        this.initializeSwipeGestures();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        this.bindVoiceWindowEvents();
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
        this.isVoiceRecording = false;
        this.isListening = false;
        this.lastUserMessage = '';
        this.lastAssistantMessage = '';
        
        console.log('–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø-–∂–µ—Å—Ç–æ–≤
     */
    initializeSwipeGestures() {
        let startX = 0;
        let startY = 0;
        let startTime = 0;
        let isMainAreaTouch = false;

        // Touch Start
        document.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
            startTime = Date.now();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª—Å—è –ª–∏ —Å–≤–∞–π–ø —Å –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            isMainAreaTouch = !e.target.closest('.voice-window') && 
                            !e.target.closest('.modal') && 
                            !e.target.closest('.side-menu');
        }, { passive: true });

        // Touch Move
        document.addEventListener('touchmove', (e) => {
            if (!isMainAreaTouch) return;
            
            const currentX = e.touches[0].clientX;
            const deltaX = currentX - startX;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø—Ä–∏ —Å–≤–∞–π–ø–µ –≤–ª–µ–≤–æ
            if (deltaX < -50 && !this.voiceWindow.classList.contains('open')) {
                const progress = Math.min(Math.abs(deltaX) / window.innerWidth, 1);
                this.voiceWindow.style.right = `${-100 + (progress * 100)}%`;
                this.voiceWindow.style.opacity = progress;
            }
        }, { passive: true });

        // Touch End
        document.addEventListener('touchend', (e) => {
            if (!isMainAreaTouch) return;
            
            const endX = e.changedTouches[0].clientX;
            const endY = e.changedTouches[0].clientY;
            const deltaX = endX - startX;
            const deltaY = endY - startY;
            const deltaTime = Date.now() - startTime;
            
            // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π –ø—Ä–µ–≤—å—é
            this.voiceWindow.style.right = '';
            this.voiceWindow.style.opacity = '';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–∞–π–ø –≤–ª–µ–≤–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–∫–Ω–∞
            if (Math.abs(deltaX) > Math.abs(deltaY) && // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
                deltaX < -100 && // –°–≤–∞–π–ø –≤–ª–µ–≤–æ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                deltaTime < 500 && // –ë—ã—Å—Ç—Ä—ã–π —Å–≤–∞–π–ø
                !this.voiceWindow.classList.contains('open')) {
                this.openVoiceWindow();
            }
            
            isMainAreaTouch = false;
        }, { passive: true });
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–∫–Ω–∞
     */
    bindVoiceWindowEvents() {
        // –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ - –í–°–ï–ì–î–ê –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.voiceMicButton?.addEventListener('click', () => {
            this.openTextInputFallback();
        });

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        this.voiceCloseButton?.addEventListener('click', () => {
            this.closeVoiceWindow();
        });
    }

    /**
     * –§–æ–ª–±—ç–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–≥–¥–∞ Speech Recognition –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
     */
    openTextInputFallback() {
        const userInput = prompt('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ –Ω–æ—Ä–≤–µ–∂—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:');
        if (userInput && userInput.trim()) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç:', userInput.trim());
            this.processVoiceInput(userInput.trim());
        } else {
            this.updateVoiceStatus('–ù–∞–∂–º–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–∫–Ω–∞
     */
    async openVoiceWindow() {
        this.voiceWindow?.classList.add('open');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Feather –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
        setTimeout(() => {
            if (typeof feather !== 'undefined') {
                feather.replace();
            }
        }, 100);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Speech Recognition
        if (!this.speechRecognition) {
            this.updateVoiceStatus('–ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.');
            console.log('–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ –±–µ–∑ Speech Recognition API');
            return;
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —è–≤–Ω–æ
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            stream.getTracks().forEach(track => track.stop()); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
            console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–æ');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            setTimeout(() => {
                this.startVoiceListening();
            }, 500);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', error);
            this.updateVoiceStatus('–ù–∞–∂–º–∏—Ç–µ "–†–∞–∑—Ä–µ—à–∏—Ç—å" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏–ª–∏ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞');
        }
        
        console.log('–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–∫–Ω–∞
     */
    closeVoiceWindow() {
        this.voiceWindow?.classList.remove('open');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        if (this.isListening) {
            this.stopVoiceListening();
        }
        
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        this.clearVoiceHistory();
        
        console.log('–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
     */
    toggleVoiceListening() {
        if (this.isListening) {
            this.stopVoiceListening();
        } else {
            this.startVoiceListening();
        }
    }

    /**
     * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
     */
    startVoiceListening() {
        console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ì–û–õ–û–°–û–í–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø ===');
        console.log('speechRecognition –æ–±—ä–µ–∫—Ç:', this.speechRecognition);
        console.log('User Agent:', navigator.userAgent);
        console.log('Protocol:', window.location.protocol);
        console.log('Location:', window.location.href);
        
        if (!this.speechRecognition) {
            this.updateVoiceStatus('Speech Recognition –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            console.error('Speech Recognition –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        this.isListening = true;
        this.voiceMicButton?.classList.add('recording');
        this.updateVoiceStatus('–°–ª—É—à–∞—é...');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        this.speechRecognition.continuous = false; // –û–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        this.speechRecognition.interimResults = true; // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.speechRecognition.lang = 'ru-RU'; // –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π
        this.speechRecognition.maxAlternatives = 3;
        
        this.speechRecognition.onstart = () => {
            console.log('Speech recognition started');
            this.updateVoiceStatus('–°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ!');
        };
        
        this.speechRecognition.onresult = (event) => {
            console.log('Speech recognition result:', event);
            let finalTranscript = '';
            let interimTranscript = '';
            
            for (let i = event.resultIndex; i < event.results.length; i++) {
                const transcript = event.results[i][0].transcript;
                if (event.results[i].isFinal) {
                    finalTranscript += transcript;
                } else {
                    interimTranscript += transcript;
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (interimTranscript) {
                this.updateVoiceStatus('–°–ª—ã—à—É: ' + interimTranscript);
            }
            
            console.log('Final transcript:', finalTranscript);
            console.log('Interim transcript:', interimTranscript);
            
            if (finalTranscript.trim()) {
                this.processVoiceInput(finalTranscript.trim());
            }
        };
        
        this.speechRecognition.onerror = (event) => {
            console.error('Speech recognition error:', event.error);
            if (event.error === 'not-allowed') {
                this.updateVoiceStatus('–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
            } else if (event.error === 'no-speech') {
                this.updateVoiceStatus('–†–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                setTimeout(() => {
                    if (this.isListening) {
                        this.speechRecognition.start();
                    }
                }, 1000);
            } else {
                this.updateVoiceStatus('–û—à–∏–±–∫–∞: ' + event.error);
            }
        };
        
        this.speechRecognition.onend = () => {
            console.log('Speech recognition ended');
            if (this.isListening && this.voiceWindow?.classList.contains('open')) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                setTimeout(() => {
                    if (this.isListening && this.voiceWindow?.classList.contains('open')) {
                        try {
                            this.updateVoiceStatus('–°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ!');
                            this.speechRecognition.start();
                        } catch (e) {
                            console.error('Failed to restart speech recognition:', e);
                            this.updateVoiceStatus('–ù–∞–∂–º–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
                            this.isListening = false;
                            this.voiceMicButton?.classList.remove('recording');
                        }
                    }
                }, 300);
            }
        };
        
        try {
            this.speechRecognition.start();
            console.log('–ì–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ');
            console.log('Speech Recognition settings:', {
                continuous: this.speechRecognition.continuous,
                interimResults: this.speechRecognition.interimResults,
                lang: this.speechRecognition.lang,
                maxAlternatives: this.speechRecognition.maxAlternatives
            });
        } catch (e) {
            console.error('Failed to start speech recognition:', e);
            this.updateVoiceStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ' + e.message);
            this.stopVoiceListening();
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
     */
    stopVoiceListening() {
        if (this.speechRecognition && this.isListening) {
            this.speechRecognition.stop();
        }
        
        this.isListening = false;
        this.voiceMicButton?.classList.remove('recording');
        this.updateVoiceStatus('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞');
        console.log('–ì–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
     */
    async processVoiceInput(transcript) {
        console.log('Processing voice input:', transcript);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.lastUserMessage = this.truncateMessage(transcript);
        this.updateVoiceStatusWithMessages('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...');
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        this.stopVoiceListening();
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            const response = this.findBestAnswer(transcript);
            console.log('Generated response:', response);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            this.lastAssistantMessage = this.truncateMessage(response);
            this.updateVoiceStatusWithMessages('–û—Ç–≤–µ—á–∞—é...');
            
            // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            await this.speakText(this.cleanTextForSpeech(response));
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
            setTimeout(() => {
                if (this.voiceWindow?.classList.contains('open')) {
                    this.updateVoiceStatusWithMessages('–°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ!');
                    this.startVoiceListening();
                }
            }, 1000);
            
        } catch (error) {
            console.error('Error processing voice input:', error);
            this.updateVoiceStatusWithMessages('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setTimeout(() => {
                if (this.voiceWindow?.classList.contains('open')) {
                    this.startVoiceListening();
                }
            }, 2000);
        }
    }

    /**
     * –û–±—Ä–µ–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
     */
    truncateMessage(text) {
        const maxWords = 6;
        const words = text.split(' ');
        
        if (words.length > maxWords) {
            return words.slice(0, maxWords).join(' ') + '...';
        }
        return text;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
     */
    updateVoiceStatusWithMessages(statusText) {
        if (!this.voiceStatus) return;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞
        if (this.lastUserMessage || this.lastAssistantMessage) {
            this.voiceStatus.className = 'voice-status has-messages';
            
            let messagesHtml = '<div class="voice-last-messages">';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.lastUserMessage) {
                messagesHtml += `<div class="voice-status-message user">${this.lastUserMessage}</div>`;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            if (this.lastAssistantMessage) {
                messagesHtml += `<div class="voice-status-message assistant">${this.lastAssistantMessage}</div>`;
            }
            
            messagesHtml += '</div>';
            messagesHtml += `<div style="margin-top: 0.5rem; font-size: 0.9rem; opacity: 0.8;">${statusText}</div>`;
            
            this.voiceStatus.innerHTML = messagesHtml;
        } else {
            // –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            this.voiceStatus.className = 'voice-status';
            this.voiceStatus.textContent = statusText;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
     */
    clearVoiceHistory() {
        this.lastUserMessage = '';
        this.lastAssistantMessage = '';
        this.updateVoiceStatus('–ù–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å...');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–∫–Ω–∞
     */
    updateVoiceStatus(message) {
        if (this.voiceStatus) {
            this.voiceStatus.className = 'voice-status';
            this.voiceStatus.textContent = message;
        }
    }


}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
 */
function copyText() {
    if (window.webAssistant) {
        window.webAssistant.copySelectedText();
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
 */
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (typeof DATABASE === 'undefined') {
        console.error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    window.webAssistant = new WebAssistant();
    
    console.log('–í–µ–±-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${DATABASE.length} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 */
window.addEventListener('error', (event) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
 */
window.addEventListener('unhandledrejection', (event) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', event.reason);
});
